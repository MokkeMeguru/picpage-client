#+TITLE: Dev Blog
* Initialization
#+begin_src shell
lein new re-frame <project-name> +garden +10x +cider +test
#+end_src

    - garden: css generator
    - 10x   : debugger tool
    - cider : development tool for emacs
** additional packages
*** for routing
- [metosin/reitit "0.5.10"]
- [metosin/reitit-malli "0.5.10"]
*** others
* development
** lein deps :tree
install development packages

** cider jack in cljs (emacs commnand)
run development server via cider system
*** or ... lein watch
run development server
** lein garden auto
run css build system
* run with sass
sass を clojure で書くのはちょっと面倒 & bulma (npm) をビルドしないと行けないので clojurescript エコシステムでは無理

clojure 以外を書くのは面倒だが、流石にここは仕方ない

#+begin_src shell
npm install node-sass --save-dev
npm install bulma --save-dev
#+end_Src

pacakge.json に scripts の部分を追加する。
#+begin_src json
{
  "name": "picpage-client",
  "dependencies": {
    "highlight.js": "9.18.1",
    "react": "16.14.0",
    "react-dom": "16.14.0",
    "react-highlight.js": "1.0.7"
  },
  "devDependencies": {
    "bulma": "^0.9.1",
    "karma": "5.2.3",
    "karma-chrome-launcher": "3.1.0",
    "karma-cljs-test": "0.1.0",
    "karma-junit-reporter": "2.0.1",
    "node-sass": "^4.14.1",
    "shadow-cljs": "2.11.4"
  },
  "scripts": {
    "css-build": "node-sass --omit-source-map-url sass/mystyles.scss resources/css/mystyles.css",
    "css-watch": "npm run css-build -- --watch",
    "start": "npm run css-watch"
  }
}
#+end_Src

sass/mystyles.scss を例えば次のようにする
#+begin_src scss
@charset "utf-8";
$navbar-breakpoint: 760px;
@import "../node_modules/bulma/bulma";
#+end_Src
こうして `npm run css-build`  とすることで resources/css/mystyles.css が生成される
    index.html に ` <link rel="stylesheet" href="css/mystyles.css">` とすることで 生成された css を読み込める。
* reCAPTCHA の導入 (クライアント)
https://www.google.com/recaptcha/ からAPIのキーを取ってくる。
html のヘッダにソースコードを貼る。

#+begin_src shell
npm install --save react-google-recaptcha
#+end_Src
